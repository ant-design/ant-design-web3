"use strict";(self.webpackChunk_ant_design_web3_docs=self.webpackChunk_ant_design_web3_docs||[]).push([[7213],{50129:function(n,d,a){a.r(d);var s=a(24007),_=a(89422),u=a(68760),x=a(78511),v=a(67597),l=a(48062),I=a(4171),h=a(42623),p=a(85826),m=a(42171),j=a(26829),w=a(19415),b=a(25382),f=a(87492),g=a(98712),y=a(62182),E=a(7825),M=a(82750),o=a(44512),r=a(8136),i=a(1735),e=a(60678),t=a(72152);function c(){return(0,t.jsx)(o.DumiPage,{children:(0,t.jsx)(i.Suspense,{fallback:(0,t.jsx)(r.Z,{}),children:(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)("div",{className:"markdown",children:[(0,t.jsxs)("h1",{id:"contract-development-and-testing",children:[(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#contract-development-and-testing",children:(0,t.jsx)("span",{className:"icon icon-link"})}),"Contract development and testing"]}),(0,t.jsxs)("h2",{id:"development-contract",children:[(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#development-contract",children:(0,t.jsx)("span",{className:"icon icon-link"})}),"development contract"]}),(0,t.jsxs)("p",{children:[e.texts[0].value,(0,t.jsx)(o.Link,{to:"/course/contract-init",children:e.texts[1].value}),e.texts[2].value,(0,t.jsx)("code",{children:e.texts[3].value}),e.texts[4].value,(0,t.jsx)("code",{children:e.texts[5].value}),e.texts[6].value]}),(0,t.jsxs)("p",{children:[e.texts[7].value,(0,t.jsx)("code",{children:e.texts[8].value}),e.texts[9].value,(0,t.jsx)("code",{children:e.texts[10].value}),e.texts[11].value,(0,t.jsx)("code",{children:e.texts[12].value}),e.texts[13].value]}),(0,t.jsx)("p",{children:e.texts[14].value}),(0,t.jsxs)("ol",{children:[(0,t.jsxs)("li",{children:[e.texts[15].value,(0,t.jsx)("code",{children:e.texts[16].value}),e.texts[17].value,(0,t.jsx)("code",{children:e.texts[18].value}),e.texts[19].value]}),(0,t.jsxs)("li",{children:[e.texts[20].value,(0,t.jsx)("code",{children:e.texts[21].value}),e.texts[22].value,(0,t.jsx)("code",{children:e.texts[23].value}),e.texts[24].value,(0,t.jsx)("code",{children:e.texts[25].value}),e.texts[26].value,(0,t.jsx)("code",{children:e.texts[27].value}),e.texts[28].value,(0,t.jsx)("code",{children:e.texts[29].value}),e.texts[30].value]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("code",{children:e.texts[31].value}),e.texts[32].value,(0,t.jsx)("code",{children:e.texts[33].value}),e.texts[34].value,(0,t.jsx)("code",{children:e.texts[35].value}),e.texts[36].value]}),(0,t.jsxs)("li",{children:[e.texts[37].value,(0,t.jsx)("code",{children:e.texts[38].value}),e.texts[39].value,(0,t.jsx)("code",{children:e.texts[40].value}),e.texts[41].value,(0,t.jsx)("code",{children:e.texts[42].value}),e.texts[43].value,(0,t.jsx)("code",{children:e.texts[44].value}),e.texts[45].value]}),(0,t.jsxs)("li",{children:[e.texts[46].value,(0,t.jsx)("code",{children:e.texts[47].value}),e.texts[48].value,(0,t.jsx)("code",{children:e.texts[49].value}),e.texts[50].value]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("code",{children:e.texts[51].value}),e.texts[52].value,(0,t.jsx)("code",{children:e.texts[53].value}),e.texts[54].value,(0,t.jsx)("code",{children:e.texts[55].value}),e.texts[56].value,(0,t.jsx)("code",{children:e.texts[57].value}),e.texts[58].value]})]}),(0,t.jsx)("p",{children:e.texts[59].value}),(0,t.jsx)(l.Z,{lang:"diff",children:e.texts[60].value}),(0,t.jsx)("blockquote",{children:(0,t.jsxs)("p",{children:[(0,t.jsx)("code",{children:e.texts[61].value}),e.texts[62].value,(0,t.jsx)("code",{children:e.texts[63].value}),e.texts[64].value]})}),(0,t.jsxs)("h2",{id:"test-contract",children:[(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#test-contract",children:(0,t.jsx)("span",{className:"icon icon-link"})}),"test contract"]}),(0,t.jsx)("ol",{children:(0,t.jsx)("li",{children:e.texts[65].value})}),(0,t.jsxs)("p",{children:[e.texts[66].value,(0,t.jsx)("code",{children:e.texts[67].value}),e.texts[68].value,(0,t.jsx)("code",{children:e.texts[69].value}),e.texts[70].value,(0,t.jsx)("code",{children:e.texts[71].value}),e.texts[72].value,(0,t.jsx)("code",{children:e.texts[73].value}),e.texts[74].value]}),(0,t.jsx)("p",{children:(0,t.jsx)("img",{alt:"",src:a(50083)})}),(0,t.jsxs)("p",{children:[e.texts[75].value,(0,t.jsx)("code",{children:e.texts[76].value}),e.texts[77].value]}),(0,t.jsx)("p",{children:e.texts[78].value}),(0,t.jsx)("p",{children:(0,t.jsx)("img",{alt:"",src:a(62840)})}),(0,t.jsx)("ol",{start:"2",children:(0,t.jsx)("li",{children:e.texts[79].value})}),(0,t.jsxs)("p",{children:[e.texts[80].value,(0,t.jsx)("a",{href:"https://remix-ide.readthedocs.io/en/latest/assert_library.html",children:e.texts[81].value}),e.texts[82].value,(0,t.jsx)("br",{}),e.texts[83].value]}),(0,t.jsxs)("ul",{children:[(0,t.jsxs)("li",{children:[(0,t.jsx)("code",{children:e.texts[84].value}),e.texts[85].value]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("code",{children:e.texts[86].value}),e.texts[87].value]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("code",{children:e.texts[88].value}),e.texts[89].value]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("code",{children:e.texts[90].value}),e.texts[91].value]})]}),(0,t.jsxs)("p",{children:[e.texts[92].value,(0,t.jsx)("code",{children:e.texts[93].value}),e.texts[94].value,(0,t.jsx)("code",{children:e.texts[95].value}),e.texts[96].value]}),(0,t.jsx)("p",{children:(0,t.jsx)("img",{alt:"",src:a(36503)})}),(0,t.jsxs)("p",{children:[e.texts[97].value,(0,t.jsx)("code",{children:e.texts[98].value}),e.texts[99].value,(0,t.jsx)("code",{children:e.texts[100].value}),e.texts[101].value]}),(0,t.jsxs)("ol",{children:[(0,t.jsxs)("li",{children:[(0,t.jsx)("code",{children:e.texts[102].value}),e.texts[103].value,(0,t.jsx)("code",{children:e.texts[104].value}),e.texts[105].value]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("code",{children:e.texts[106].value}),e.texts[107].value]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("code",{children:e.texts[108].value}),e.texts[109].value]}),(0,t.jsxs)("li",{children:[e.texts[110].value,(0,t.jsx)("code",{children:e.texts[111].value}),e.texts[112].value,(0,t.jsx)("code",{children:e.texts[113].value}),e.texts[114].value,(0,t.jsx)("code",{children:e.texts[115].value}),e.texts[116].value,(0,t.jsx)("code",{children:e.texts[117].value}),e.texts[118].value,(0,t.jsx)("code",{children:e.texts[119].value}),e.texts[120].value]}),(0,t.jsxs)("li",{children:[e.texts[121].value,(0,t.jsx)("code",{children:e.texts[122].value}),e.texts[123].value,(0,t.jsx)("code",{children:e.texts[124].value}),e.texts[125].value,(0,t.jsx)("code",{children:e.texts[126].value}),e.texts[127].value,(0,t.jsx)("code",{children:e.texts[128].value}),e.texts[129].value,(0,t.jsx)("code",{children:e.texts[130].value}),e.texts[131].value]}),(0,t.jsxs)("li",{children:[e.texts[132].value,(0,t.jsx)("code",{children:e.texts[133].value}),e.texts[134].value,(0,t.jsx)("code",{children:e.texts[135].value}),e.texts[136].value,(0,t.jsx)("code",{children:e.texts[137].value}),e.texts[138].value,(0,t.jsx)("code",{children:e.texts[139].value}),e.texts[140].value,(0,t.jsx)("code",{children:e.texts[141].value}),e.texts[142].value]})]}),(0,t.jsx)(l.Z,{lang:"solidity",children:e.texts[143].value}),(0,t.jsxs)("p",{children:[e.texts[144].value,(0,t.jsx)("a",{href:"https://remix-ide.readthedocs.io/en/latest/unittesting.html",children:e.texts[145].value}),e.texts[146].value]}),(0,t.jsx)("ol",{start:"3",children:(0,t.jsx)("li",{children:e.texts[147].value})}),(0,t.jsxs)("p",{children:[e.texts[148].value,(0,t.jsx)("code",{children:e.texts[149].value}),e.texts[150].value]}),(0,t.jsx)("p",{children:(0,t.jsx)("img",{alt:"",src:a(56571)})}),(0,t.jsx)("p",{children:e.texts[151].value}),(0,t.jsxs)("p",{children:[e.texts[152].value,(0,t.jsx)("code",{children:e.texts[153].value}),e.texts[154].value]}),(0,t.jsx)("blockquote",{children:(0,t.jsx)("p",{children:e.texts[155].value})}),(0,t.jsxs)("p",{children:[e.texts[156].value,(0,t.jsx)("code",{children:e.texts[157].value}),e.texts[158].value,(0,t.jsx)("code",{children:e.texts[159].value}),e.texts[160].value,(0,t.jsx)("code",{children:e.texts[161].value}),e.texts[162].value,(0,t.jsx)("code",{children:e.texts[163].value}),e.texts[164].value,(0,t.jsx)("br",{}),e.texts[165].value]}),(0,t.jsx)("p",{children:(0,t.jsx)("img",{alt:"",src:a(65234)})}),(0,t.jsxs)("p",{children:[e.texts[166].value,(0,t.jsx)("code",{children:e.texts[167].value}),e.texts[168].value]}),(0,t.jsx)("p",{children:e.texts[169].value}),(0,t.jsxs)("p",{children:[e.texts[170].value,(0,t.jsx)("code",{children:e.texts[171].value}),e.texts[172].value,(0,t.jsx)("code",{children:e.texts[173].value}),e.texts[174].value]})]})})})})}d.default=c},60678:function(n,d,a){a.r(d),a.d(d,{texts:function(){return s}});const s=[{value:"In the ",paraId:0,tocIndex:1},{value:"previous article",paraId:1,tocIndex:1},{value:" we created a base contract for ",paraId:0,tocIndex:1},{value:"ERC721",paraId:0,tocIndex:1},{value:" with ",paraId:0,tocIndex:1},{value:"Mint",paraId:0,tocIndex:1},{value:" functionality, so let's move on to writing and compiling the contract.",paraId:0,tocIndex:1},{value:"In the following code we simply implement a new ",paraId:2,tocIndex:1},{value:"mint",paraId:2,tocIndex:1},{value:" method to replace the ",paraId:2,tocIndex:1},{value:"safeMint",paraId:2,tocIndex:1},{value:" generated by default. The new ",paraId:2,tocIndex:1},{value:"mint",paraId:2,tocIndex:1},{value:" method maintains the same interface as the method we used in the previous chapter so that we can replace the course's contract with the new one once we have deployed the contract.",paraId:2,tocIndex:1},{value:"Specifically to be modified within there:",paraId:3,tocIndex:1},{value:"set ",paraId:4,tocIndex:1},{value:"initialOwner",paraId:4,tocIndex:1},{value:" to be the contract issuer so that it is simpler to deploy the contract without having to specify ",paraId:4,tocIndex:1},{value:"initialOwner",paraId:4,tocIndex:1},{value:".",paraId:4,tocIndex:1},{value:"define a contract private variable ",paraId:4,tocIndex:1},{value:"private",paraId:4,tocIndex:1},{value:" named ",paraId:4,tocIndex:1},{value:"_nextTokenId",paraId:4,tocIndex:1},{value:" of type ",paraId:4,tocIndex:1},{value:"uint256",paraId:4,tocIndex:1},{value:" to mark the current progress, and add one to the value for each new NFT. 1. set ",paraId:4,tocIndex:1},{value:"mint",paraId:4,tocIndex:1},{value:" as the contract issuer so that it will be easier to deploy contracts without specifying ",paraId:4,tocIndex:1},{value:"initialOwner",paraId:4,tocIndex:1},{value:";",paraId:4,tocIndex:1},{value:"quantity",paraId:4,tocIndex:1},{value:" of type ",paraId:4,tocIndex:1},{value:"uint256",paraId:4,tocIndex:1},{value:" is required to be passed in ",paraId:4,tocIndex:1},{value:"mint",paraId:4,tocIndex:1},{value:" method to represent how many NFTs are to be minted this time, here we simplify the logic by limiting the minting to one at a time.",paraId:4,tocIndex:1},{value:"remove the ",paraId:4,tocIndex:1},{value:"onlyOwner",paraId:4,tocIndex:1},{value:" modifier so that anyone can call the ",paraId:4,tocIndex:1},{value:"mint",paraId:4,tocIndex:1},{value:" method. 2. add the ",paraId:4,tocIndex:1},{value:"payable",paraId:4,tocIndex:1},{value:" modifier so that anyone can call the ",paraId:4,tocIndex:1},{value:"mint",paraId:4,tocIndex:1},{value:" method.",paraId:4,tocIndex:1},{value:"add the ",paraId:4,tocIndex:1},{value:"payable",paraId:4,tocIndex:1},{value:" qualifier so that anyone calling the ",paraId:4,tocIndex:1},{value:"mint",paraId:4,tocIndex:1},{value:" method can transfer money to the contract at the same time.",paraId:4,tocIndex:1},{value:"_safeMint",paraId:4,tocIndex:1},{value:" should also be changed to ",paraId:4,tocIndex:1},{value:"_mint",paraId:4,tocIndex:1},{value:", mainly to avoid errors when testing the contract by calling it from a Remix contract later on, and ",paraId:4,tocIndex:1},{value:"to",paraId:4,tocIndex:1},{value:" should be changed to ",paraId:4,tocIndex:1},{value:"msg.sender",paraId:4,tocIndex:1},{value:", which stands for the address that the NFT is casting to for initiating the transaction.",paraId:4,tocIndex:1},{value:"The code is as follows\uFF1A",paraId:5,tocIndex:1},{value:`// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract MyToken is ERC721, Ownable {
+    uint256 private _nextTokenId = 0;

-    constructor(address initialOwner)
+    constructor()
        ERC721("MyToken", "MTK")
-        Ownable(initialOwner)
+        Ownable(msg.sender)
    {}

-    function safeMint(address to, uint256 tokenId) public onlyOwner {
+    function mint(uint256 quantity) public payable {
+        require(quantity == 1, "quantity must be 1");
+        require(msg.value == 0.01 ether, "must pay 0.01 ether");
+        uint256 tokenId = _nextTokenId++;
-        _safeMint(to, tokenId);
+        _mint(msg.sender, tokenId);
    }
}
`,paraId:6,tocIndex:1},{value:"Private",paraId:7,tocIndex:1},{value:" refers to methods and variables that can only be called in the pre-deployment contract, while ",paraId:7,tocIndex:1},{value:"public",paraId:7,tocIndex:1},{value:" methods and variables are accessible to everyone.",paraId:7,tocIndex:1},{value:"Unit Test Plugin",paraId:8,tocIndex:2},{value:"We need to click on the ",paraId:9,tocIndex:2},{value:"Plugin Manager",paraId:9,tocIndex:2},{value:" icon in the bottom left corner of the plugin manager to search for the ",paraId:9,tocIndex:2},{value:"unit",paraId:9,tocIndex:2},{value:" keyword, then the search result ",paraId:9,tocIndex:2},{value:"SOLIDITY UNIT TESTING",paraId:9,tocIndex:2},{value:" will appear, click on ",paraId:9,tocIndex:2},{value:"Activate",paraId:9,tocIndex:2},{value:" to install and activate the plugin, as shown in the figure below:",paraId:9,tocIndex:2},{value:"The ",paraId:10,tocIndex:2},{value:"Solidity unit testing",paraId:10,tocIndex:2},{value:" icon will then appear in the left icon bar and clicking on it will load the plugin in the side panel.",paraId:10,tocIndex:2},{value:"After successful loading, the plugin should look like this:",paraId:11,tocIndex:2},{value:"Unit test documentation",paraId:12,tocIndex:2},{value:"Remix injects a built-in assert library that can be used for testing. You can see the documentation of the library ",paraId:13,tocIndex:2},{value:"here",paraId:13,tocIndex:2},{value:".",paraId:13,tocIndex:2},{value:`
In addition to this, Remix allows some special functions to be used in the test file to make the tests more structured. They are:`,paraId:13,tocIndex:2},{value:"beforeEach()",paraId:14,tocIndex:2},{value:" - Run before each test",paraId:14,tocIndex:2},{value:"beforeAll()",paraId:14,tocIndex:2},{value:" - Run before all tests",paraId:14,tocIndex:2},{value:"afterEach()",paraId:14,tocIndex:2},{value:" - Run after each test",paraId:14,tocIndex:2},{value:"afterAll()",paraId:14,tocIndex:2},{value:" - Run after all the tests",paraId:14,tocIndex:2},{value:"Our unit test file, in the directory ",paraId:15,tocIndex:2},{value:"tests/MyToken_test.sol",paraId:15,tocIndex:2},{value:", is there because the template contract we chose automatically created the test contract for us. If we had created a new blank folder, then we would need to click through the ",paraId:15,tocIndex:2},{value:"Generate",paraId:15,tocIndex:2},{value:" button to generate the test file, as shown below:",paraId:15,tocIndex:2},{value:"Then we click on our test file ",paraId:16,tocIndex:2},{value:"tests/MyToken_test.sol",paraId:16,tocIndex:2},{value:" in ",paraId:16,tocIndex:2},{value:"File explorer",paraId:16,tocIndex:2},{value:" and write the following test:",paraId:16,tocIndex:2},{value:"remix_tests.sol",paraId:17,tocIndex:2},{value:" is automatically injected by ",paraId:17,tocIndex:2},{value:"Remix",paraId:17,tocIndex:2},{value:";",paraId:17,tocIndex:2},{value:"remix_accounts.sol",paraId:17,tocIndex:2},{value:" generates the list of test account addresses for us;",paraId:17,tocIndex:2},{value:"../contracts/MyToken.sol",paraId:17,tocIndex:2},{value:" introduces the contract file we have written;",paraId:17,tocIndex:2},{value:"instantiated our contract ",paraId:17,tocIndex:2},{value:"MyToken",paraId:17,tocIndex:2},{value:" defined as ",paraId:17,tocIndex:2},{value:"s",paraId:17,tocIndex:2},{value:" in ",paraId:17,tocIndex:2},{value:"beforeAll()",paraId:17,tocIndex:2},{value:" and took a test address and saved it ",paraId:17,tocIndex:2},{value:"TestsAccounts.getAccount(0)",paraId:17,tocIndex:2},{value:" defined as ",paraId:17,tocIndex:2},{value:"acc0",paraId:17,tocIndex:2},{value:";",paraId:17,tocIndex:2},{value:"verify in ",paraId:17,tocIndex:2},{value:"testTokenNameAndSymbol()",paraId:17,tocIndex:2},{value:" that the instantiated contract ",paraId:17,tocIndex:2},{value:"name()",paraId:17,tocIndex:2},{value:" is going to get the value ",paraId:17,tocIndex:2},{value:"MyToken",paraId:17,tocIndex:2},{value:" and ",paraId:17,tocIndex:2},{value:"symbol()",paraId:17,tocIndex:2},{value:" the value of ",paraId:17,tocIndex:2},{value:"MTK",paraId:17,tocIndex:2},{value:";",paraId:17,tocIndex:2},{value:"Write a function ",paraId:17,tocIndex:2},{value:"testMint()",paraId:17,tocIndex:2},{value:" that calls our ",paraId:17,tocIndex:2},{value:"mint(1)",paraId:17,tocIndex:2},{value:" method, and the value of ",paraId:17,tocIndex:2},{value:"balanceOf()",paraId:17,tocIndex:2},{value:" cast once should be ",paraId:17,tocIndex:2},{value:"1",paraId:17,tocIndex:2},{value:". The code for the ",paraId:17,tocIndex:2},{value:"tests/MyToken_test.sol",paraId:17,tocIndex:2},{value:" is as follows\uFF1A",paraId:17,tocIndex:2},{value:`// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.8.0 <0.9.0;
import "remix_tests.sol";
import "remix_accounts.sol";
import "../contracts/MyToken.sol";

contract MyTokenTest {
    MyToken s;
    function beforeAll () public {
        s = new MyToken();
    }

    function testTokenNameAndSymbol () public {
        Assert.equal(s.name(), "MyToken", "token name did not match");
        Assert.equal(s.symbol(), "MTK", "token symbol did not match");
    }
    /// #value: 10000000000000000
    function testMint() public payable {
        s.mint{value: msg.value}(1);
        Assert.equal(s.balanceOf(address(this)), 1, "balance did not match");
    }
}
`,paraId:18,tocIndex:2},{value:"Remix's single test is to call the contract we want to test in a contract to test, the details will not be expanded first, you can refer to ",paraId:19,tocIndex:2},{value:"Remix unit test plugin's documentation",paraId:19,tocIndex:2},{value:".",paraId:19,tocIndex:2},{value:"Running Unit Tests",paraId:20,tocIndex:2},{value:"When we have finished writing the test, select the file and click ",paraId:21,tocIndex:2},{value:"Run",paraId:21,tocIndex:2},{value:" to execute the test. The execution will run in a separate environment. After completing the execution of a file, the following test summary will be displayed:",paraId:21,tocIndex:2},{value:"And that's it, unit testing for our contract is done.",paraId:22,tocIndex:2},{value:"Of course, if you're more comfortable testing with Chai and Mocha, ",paraId:23,tocIndex:2},{value:"Remix",paraId:23,tocIndex:2},{value:" is also supported.",paraId:23,tocIndex:2},{value:"Chai is a BDD / TDD assertion library for Node.js and browsers that pairs happily with any JavaScript testing framework.Mocha is a feature-rich JavaScript testing framework that runs on Node.js and browsers, making asynchronous testing easy and fun.",paraId:24,tocIndex:2},{value:"Simply create a ",paraId:25,tocIndex:2},{value:"js",paraId:25,tocIndex:2},{value:" file in your workspace, preferably in the ",paraId:25,tocIndex:2},{value:"scripts",paraId:25,tocIndex:2},{value:" folder. Then right click on the new ",paraId:25,tocIndex:2},{value:"js",paraId:25,tocIndex:2},{value:" file with the test code written in it and click ",paraId:25,tocIndex:2},{value:"Run",paraId:25,tocIndex:2},{value:".",paraId:25,tocIndex:2},{value:`
It will look something like this:`,paraId:25,tocIndex:2},{value:"Click ",paraId:26,tocIndex:2},{value:"Run",paraId:26,tocIndex:2},{value:" and the results will be displayed in the terminal after executing the test.",paraId:26,tocIndex:2},{value:"Here is just an example, providing ways and means by which this can be done, and is fully supported if you are good at this approach.",paraId:27,tocIndex:2},{value:"Next we'll try, ",paraId:28,tocIndex:2},{value:"Compile",paraId:28,tocIndex:2},{value:" and ",paraId:28,tocIndex:2},{value:"Deploy Upstream",paraId:28,tocIndex:2},{value:" the contract file we wrote.",paraId:28,tocIndex:2}]},65234:function(n,d,a){n.exports=a.p+"static/chai.b3ac90e4.png"},36503:function(n,d,a){n.exports=a.p+"static/generate.ef5a7bf0.png"},56571:function(n,d,a){n.exports=a.p+"static/run.4d18834f.png"},50083:function(n,d,a){n.exports=a.p+"static/unitTest.57624238.png"},62840:function(n,d,a){n.exports=a.p+"static/unitTest1.02b0cc40.png"}}]);
